generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String         @id @default(cuid())
  userid            String         @unique @db.VarChar(30)
  email             String?        @db.VarChar(320)
  primaryEmail      String?        @db.VarChar(320)
  nickname          String         @db.VarChar(50)
  password          String?        @db.VarChar(255)
  bio               String?        @db.VarChar(500)
  profileImage      String?        @db.VarChar(255)
  isVerified        Boolean        @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpires DateTime?
  socialLinks       Json?
  privacy           Json?
  createdAt         DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime       @updatedAt @db.Timestamptz(6)
  accounts          Account[]
  comments          Comment[]
  following         Follow[]       @relation("UserFollowing")
  followers         Follow[]       @relation("UserFollowers")
  likes             Like[]
  sentNotifications Notification[] @relation("NotificationSender")
  notifications     Notification[] @relation("NotificationReceiver")
  refreshTokens     RefreshToken[]
  reviewDrafts      ReviewDraft[]
  reviews           Review[]
  userBadges        UserBadge[]

  @@index([userid])
  @@index([nickname])
  @@index([createdAt(sort: Desc)])
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String   @default("email") @db.VarChar(20)
  provider          String   @default("email") @db.VarChar(20)
  providerAccountId String   @db.VarChar(100)
  email             String?  @db.VarChar(320)
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @db.Timestamptz(6)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([email])
  @@map("accounts")
}

model Book {
  id           String        @id @default(cuid())
  isbn         String?       @unique @db.VarChar(20)
  isbn10       String?       @db.VarChar(10)
  isbn13       String?       @db.VarChar(13)
  title        String        @db.VarChar(500)
  author       String        @db.VarChar(200)
  publisher    String?       @db.VarChar(200)
  publishedAt  String?       @db.VarChar(20)
  description  String?
  thumbnail    String?       @db.VarChar(500)
  category     String?       @db.VarChar(100)
  pages        Int?
  source       String        @default("MANUAL") @db.VarChar(20)
  externalId   String?       @db.VarChar(100)
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @db.Timestamptz(6)
  reviewDrafts ReviewDraft[]
  reviews      Review[]

  @@index([isbn10])
  @@index([isbn13])
  @@index([title])
  @@index([author])
  @@index([createdAt(sort: Desc)])
  @@map("books")
}

model Review {
  id            String    @id @default(cuid())
  title         String    @db.VarChar(200)
  content       String
  isRecommended Boolean   @default(true)
  rating        Int?      @default(5)
  tags          String?
  isPublic      Boolean   @default(true)
  status        String    @default("PUBLISHED") @db.VarChar(20)
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(6)
  userId        String
  bookId        String
  comments      Comment[]
  likes         Like[]
  book          Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookId])
  @@index([createdAt(sort: Desc)])
  @@index([isPublic, createdAt(sort: Desc)])
  @@map("reviews")
}

model ReviewDraft {
  id            String   @id @default(cuid())
  userId        String
  bookId        String?
  title         String?  @db.VarChar(200)
  contentHtml   String
  isRecommended Boolean?
  visibility    String?  @db.VarChar(20)
  tags          String?
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)
  book          Book?    @relation(fields: [bookId], references: [id])
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("review_drafts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@map("likes")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  parentId  String?
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  userId    String
  reviewId  String
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  review    Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   @db.VarChar(20)
  message   String   @db.VarChar(500)
  isRead    Boolean  @default(false)
  data      String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  userId    String
  senderId  String?
  reviewId  String?
  commentId String?
  sender    User?    @relation("NotificationSender", fields: [senderId], references: [id])
  user      User     @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  jtiHash   String   @unique @db.VarChar(128)
  isRevoked Boolean  @default(false)
  issuedAt  DateTime @default(now()) @db.Timestamptz(6)
  expiresAt DateTime @db.Timestamptz(6)
  userAgent String?  @db.VarChar(255)
  ip        String?  @db.VarChar(64)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model Badge {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  icon        String
  tier        BadgeTier
  condition   Json
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  userBadges  UserBadge[]

  @@index([tier])
  @@index([isActive])
  @@map("badges")
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now()) @db.Timestamptz(6)
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([earnedAt(sort: Desc)])
  @@map("user_badges")
}

model SearchAnalytics {
  id           Int      @id @default(autoincrement())
  query        String
  queryType    String?  @map("query_type") @db.VarChar(20)
  searchType   String?  @map("search_type") @db.VarChar(20)
  resultCount  Int?     @map("result_count")
  durationMs   Int?     @map("duration_ms")
  searchMethod String?  @map("search_method") @db.VarChar(20)
  userId       String?  @map("user_id") @db.VarChar(255)
  userAgent    String?  @map("user_agent")
  ipAddress    String?  @map("ip_address")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([query])
  @@index([createdAt])
  @@index([queryType])
  @@index([searchMethod])
  @@index([userId])
  @@map("search_analytics")
}

model SearchSuggestions {
  id        Int      @id @default(autoincrement())
  text      String   @unique
  category  String?  @db.VarChar(20)
  frequency Int      @default(1)
  lastUsed  DateTime @default(now()) @map("last_used") @db.Timestamptz(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([text])
  @@index([frequency(sort: Desc)])
  @@index([category])
  @@map("search_suggestions")
}

model SearchTrends {
  id          Int      @id @default(autoincrement())
  query       String
  searchCount Int      @default(1) @map("search_count")
  date        DateTime @default(now()) @db.Date
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([query, date])
  @@index([date])
  @@index([searchCount(sort: Desc)])
  @@index([query])
  @@map("search_trends")
}

model SearchMetrics {
  id           Int      @id @default(autoincrement())
  metricName   String   @map("metric_name") @db.VarChar(50)
  metricValue  Decimal? @map("metric_value") @db.Decimal(10, 3)
  searchMethod String?  @map("search_method") @db.VarChar(20)
  searchType   String?  @map("search_type") @db.VarChar(20)
  measuredAt   DateTime @default(now()) @map("measured_at") @db.Timestamptz(6)

  @@index([metricName])
  @@index([measuredAt])
  @@index([searchMethod])
  @@map("search_metrics")
}

enum BadgeTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

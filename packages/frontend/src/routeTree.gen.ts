/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ReviewReviewIdRouteImport } from './routes/review.$reviewId'
import { Route as ProfileUserIdRouteImport } from './routes/profile.$userId'
import { Route as BooksBookIdRouteImport } from './routes/books.$bookId'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReviewReviewIdRoute = ReviewReviewIdRouteImport.update({
  id: '/review/$reviewId',
  path: '/review/$reviewId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileUserIdRoute = ProfileUserIdRouteImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => rootRouteImport,
} as any)
const BooksBookIdRoute = BooksBookIdRouteImport.update({
  id: '/books/$bookId',
  path: '/books/$bookId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/review/$reviewId': typeof ReviewReviewIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/review/$reviewId': typeof ReviewReviewIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/review/$reviewId': typeof ReviewReviewIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/books/$bookId'
    | '/profile/$userId'
    | '/review/$reviewId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/books/$bookId'
    | '/profile/$userId'
    | '/review/$reviewId'
  id:
    | '__root__'
    | '/'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/books/$bookId'
    | '/profile/$userId'
    | '/review/$reviewId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  BooksBookIdRoute: typeof BooksBookIdRoute
  ProfileUserIdRoute: typeof ProfileUserIdRoute
  ReviewReviewIdRoute: typeof ReviewReviewIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/review/$reviewId': {
      id: '/review/$reviewId'
      path: '/review/$reviewId'
      fullPath: '/review/$reviewId'
      preLoaderRoute: typeof ReviewReviewIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$userId': {
      id: '/profile/$userId'
      path: '/profile/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof ProfileUserIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/books/$bookId': {
      id: '/books/$bookId'
      path: '/books/$bookId'
      fullPath: '/books/$bookId'
      preLoaderRoute: typeof BooksBookIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  BooksBookIdRoute: BooksBookIdRoute,
  ProfileUserIdRoute: ProfileUserIdRoute,
  ReviewReviewIdRoute: ReviewReviewIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

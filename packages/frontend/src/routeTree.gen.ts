/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WriteRouteImport } from './routes/write'
import { Route as VerifyEmailRouteImport } from './routes/verify-email'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as LoginRouteImport } from './routes/login'
import { Route as GuidelinesRouteImport } from './routes/guidelines'
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ReviewReviewIdRouteImport } from './routes/review.$reviewId'
import { Route as ReviewEditReviewIdRouteImport } from './routes/review-edit.$reviewId'
import { Route as ProfileUseridRouteImport } from './routes/profile.$userid'
import { Route as BooksBookIdRouteImport } from './routes/books.$bookId'

const WriteRoute = WriteRouteImport.update({
  id: '/write',
  path: '/write',
  getParentRoute: () => rootRouteImport,
} as any)
const VerifyEmailRoute = VerifyEmailRouteImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const GuidelinesRoute = GuidelinesRouteImport.update({
  id: '/guidelines',
  path: '/guidelines',
  getParentRoute: () => rootRouteImport,
} as any)
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ReviewReviewIdRoute = ReviewReviewIdRouteImport.update({
  id: '/review/$reviewId',
  path: '/review/$reviewId',
  getParentRoute: () => rootRouteImport,
} as any)
const ReviewEditReviewIdRoute = ReviewEditReviewIdRouteImport.update({
  id: '/review-edit/$reviewId',
  path: '/review-edit/$reviewId',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileUseridRoute = ProfileUseridRouteImport.update({
  id: '/profile/$userid',
  path: '/profile/$userid',
  getParentRoute: () => rootRouteImport,
} as any)
const BooksBookIdRoute = BooksBookIdRouteImport.update({
  id: '/books/$bookId',
  path: '/books/$bookId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/guidelines': typeof GuidelinesRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/verify-email': typeof VerifyEmailRoute
  '/write': typeof WriteRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/profile/$userid': typeof ProfileUseridRoute
  '/review-edit/$reviewId': typeof ReviewEditReviewIdRoute
  '/review/$reviewId': typeof ReviewReviewIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/guidelines': typeof GuidelinesRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/verify-email': typeof VerifyEmailRoute
  '/write': typeof WriteRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/profile/$userid': typeof ProfileUseridRoute
  '/review-edit/$reviewId': typeof ReviewEditReviewIdRoute
  '/review/$reviewId': typeof ReviewReviewIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/forgot-password': typeof ForgotPasswordRoute
  '/guidelines': typeof GuidelinesRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/register': typeof RegisterRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/verify-email': typeof VerifyEmailRoute
  '/write': typeof WriteRoute
  '/books/$bookId': typeof BooksBookIdRoute
  '/profile/$userid': typeof ProfileUseridRoute
  '/review-edit/$reviewId': typeof ReviewEditReviewIdRoute
  '/review/$reviewId': typeof ReviewReviewIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/forgot-password'
    | '/guidelines'
    | '/login'
    | '/notifications'
    | '/register'
    | '/search'
    | '/settings'
    | '/verify-email'
    | '/write'
    | '/books/$bookId'
    | '/profile/$userid'
    | '/review-edit/$reviewId'
    | '/review/$reviewId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/forgot-password'
    | '/guidelines'
    | '/login'
    | '/notifications'
    | '/register'
    | '/search'
    | '/settings'
    | '/verify-email'
    | '/write'
    | '/books/$bookId'
    | '/profile/$userid'
    | '/review-edit/$reviewId'
    | '/review/$reviewId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/forgot-password'
    | '/guidelines'
    | '/login'
    | '/notifications'
    | '/register'
    | '/search'
    | '/settings'
    | '/verify-email'
    | '/write'
    | '/books/$bookId'
    | '/profile/$userid'
    | '/review-edit/$reviewId'
    | '/review/$reviewId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  ForgotPasswordRoute: typeof ForgotPasswordRoute
  GuidelinesRoute: typeof GuidelinesRoute
  LoginRoute: typeof LoginRoute
  NotificationsRoute: typeof NotificationsRoute
  RegisterRoute: typeof RegisterRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  VerifyEmailRoute: typeof VerifyEmailRoute
  WriteRoute: typeof WriteRoute
  BooksBookIdRoute: typeof BooksBookIdRoute
  ProfileUseridRoute: typeof ProfileUseridRoute
  ReviewEditReviewIdRoute: typeof ReviewEditReviewIdRoute
  ReviewReviewIdRoute: typeof ReviewReviewIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/write': {
      id: '/write'
      path: '/write'
      fullPath: '/write'
      preLoaderRoute: typeof WriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/verify-email': {
      id: '/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof VerifyEmailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/guidelines': {
      id: '/guidelines'
      path: '/guidelines'
      fullPath: '/guidelines'
      preLoaderRoute: typeof GuidelinesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forgot-password': {
      id: '/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof ForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/review/$reviewId': {
      id: '/review/$reviewId'
      path: '/review/$reviewId'
      fullPath: '/review/$reviewId'
      preLoaderRoute: typeof ReviewReviewIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/review-edit/$reviewId': {
      id: '/review-edit/$reviewId'
      path: '/review-edit/$reviewId'
      fullPath: '/review-edit/$reviewId'
      preLoaderRoute: typeof ReviewEditReviewIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$userid': {
      id: '/profile/$userid'
      path: '/profile/$userid'
      fullPath: '/profile/$userid'
      preLoaderRoute: typeof ProfileUseridRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/books/$bookId': {
      id: '/books/$bookId'
      path: '/books/$bookId'
      fullPath: '/books/$bookId'
      preLoaderRoute: typeof BooksBookIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  GuidelinesRoute: GuidelinesRoute,
  LoginRoute: LoginRoute,
  NotificationsRoute: NotificationsRoute,
  RegisterRoute: RegisterRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  VerifyEmailRoute: VerifyEmailRoute,
  WriteRoute: WriteRoute,
  BooksBookIdRoute: BooksBookIdRoute,
  ProfileUseridRoute: ProfileUseridRoute,
  ReviewEditReviewIdRoute: ReviewEditReviewIdRoute,
  ReviewReviewIdRoute: ReviewReviewIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

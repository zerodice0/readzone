name: ReadZone Dependency Security Automation

on:
  # Run on dependency changes
  push:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.nvmrc'
  
  # Run on pull requests that modify dependencies
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.nvmrc'
  
  # Daily dependency security scan
  schedule:
    - cron: '0 4 * * *'  # 4 AM UTC daily
  
  # Manual trigger for immediate security assessment
  workflow_dispatch:
    inputs:
      scan-type:
        description: 'Type of dependency scan'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - comprehensive
          - deep-audit
      auto-fix:
        description: 'Automatically create PRs for fixable vulnerabilities'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # Stage 1: Dependency Analysis & Vulnerability Detection
  dependency-analysis:
    name: 🔍 Dependency Security Analysis
    runs-on: ubuntu-latest
    
    outputs:
      vulnerabilities-found: ${{ steps.audit-analysis.outputs.vulnerabilities-found }}
      critical-count: ${{ steps.audit-analysis.outputs.critical-count }}
      high-count: ${{ steps.audit-analysis.outputs.high-count }}
      moderate-count: ${{ steps.audit-analysis.outputs.moderate-count }}
      outdated-count: ${{ steps.outdated-check.outputs.outdated-count }}
      security-score: ${{ steps.security-score.outputs.score }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      # Comprehensive NPM Audit
      - name: Run comprehensive NPM audit
        id: npm-audit
        run: |
          echo "Running comprehensive NPM security audit..."
          
          # Run audit for all severity levels
          npm audit --json > npm-audit-full.json || true
          npm audit --audit-level moderate --json > npm-audit-moderate.json || true
          npm audit --audit-level high --json > npm-audit-high.json || true
          npm audit --audit-level critical --json > npm-audit-critical.json || true
          
          # Generate human-readable reports
          npm audit > npm-audit-report.txt || true
          npm audit --audit-level high > npm-audit-high-report.txt || true
          
          echo "NPM audit completed"

      - name: Analyze audit results
        id: audit-analysis
        run: |
          echo "Analyzing NPM audit results..."
          
          # Parse audit results
          if [ -f "npm-audit-full.json" ]; then
            TOTAL_VULNS=$(cat npm-audit-full.json | jq -r '.metadata.vulnerabilities.total // 0')
            CRITICAL_VULNS=$(cat npm-audit-full.json | jq -r '.metadata.vulnerabilities.critical // 0')
            HIGH_VULNS=$(cat npm-audit-full.json | jq -r '.metadata.vulnerabilities.high // 0')
            MODERATE_VULNS=$(cat npm-audit-full.json | jq -r '.metadata.vulnerabilities.moderate // 0')
            LOW_VULNS=$(cat npm-audit-full.json | jq -r '.metadata.vulnerabilities.low // 0')
          else
            TOTAL_VULNS=0
            CRITICAL_VULNS=0
            HIGH_VULNS=0
            MODERATE_VULNS=0
            LOW_VULNS=0
          fi
          
          echo "Vulnerability Summary:"
          echo "- Total: $TOTAL_VULNS"
          echo "- Critical: $CRITICAL_VULNS"
          echo "- High: $HIGH_VULNS"
          echo "- Moderate: $MODERATE_VULNS"
          echo "- Low: $LOW_VULNS"
          
          # Set outputs
          echo "vulnerabilities-found=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "critical-count=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          echo "high-count=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "moderate-count=$MODERATE_VULNS" >> $GITHUB_OUTPUT
          echo "low-count=$LOW_VULNS" >> $GITHUB_OUTPUT

      # Check for outdated dependencies
      - name: Check outdated dependencies
        id: outdated-check
        run: |
          echo "Checking for outdated dependencies..."
          
          # Get outdated packages
          npm outdated --json > npm-outdated.json || true
          
          if [ -f "npm-outdated.json" ]; then
            OUTDATED_COUNT=$(cat npm-outdated.json | jq 'keys | length' 2>/dev/null || echo "0")
          else
            OUTDATED_COUNT=0
          fi
          
          echo "Outdated packages: $OUTDATED_COUNT"
          echo "outdated-count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          
          # Generate outdated report
          npm outdated > npm-outdated-report.txt || true

      # License compliance check
      - name: License compliance scan
        run: |
          echo "Scanning for license compliance..."
          
          # Use license-checker to analyze licenses
          npx license-checker --json > license-report.json || true
          npx license-checker --summary > license-summary.txt || true
          
          # Check for problematic licenses
          if [ -f "license-report.json" ]; then
            # Common problematic licenses for commercial use
            PROBLEMATIC_LICENSES=$(cat license-report.json | jq -r '
              to_entries[] | 
              select(.value.licenses | tostring | test("GPL|AGPL|CPAL|OSL|QPL|SSPL"; "i")) | 
              .key
            ' | wc -l)
            
            echo "Packages with potentially problematic licenses: $PROBLEMATIC_LICENSES"
            
            if [ "$PROBLEMATIC_LICENSES" -gt 0 ]; then
              echo "⚠️  Potentially problematic licenses detected:"
              cat license-report.json | jq -r '
                to_entries[] | 
                select(.value.licenses | tostring | test("GPL|AGPL|CPAL|OSL|QPL|SSPL"; "i")) | 
                "\(.key): \(.value.licenses)"
              '
            fi
          fi

      # Calculate security score
      - name: Calculate security score
        id: security-score
        run: |
          echo "Calculating dependency security score..."
          
          CRITICAL_COUNT="${{ steps.audit-analysis.outputs.critical-count }}"
          HIGH_COUNT="${{ steps.audit-analysis.outputs.high-count }}"
          MODERATE_COUNT="${{ steps.audit-analysis.outputs.moderate-count }}"
          OUTDATED_COUNT="${{ steps.outdated-check.outputs.outdated-count }}"
          
          # Base score
          SCORE=100
          
          # Deduct points for vulnerabilities
          SCORE=$((SCORE - CRITICAL_COUNT * 25))  # Critical: -25 points each
          SCORE=$((SCORE - HIGH_COUNT * 15))      # High: -15 points each
          SCORE=$((SCORE - MODERATE_COUNT * 5))   # Moderate: -5 points each
          
          # Deduct points for outdated dependencies
          if [ "$OUTDATED_COUNT" -gt 20 ]; then
            SCORE=$((SCORE - 20))  # Many outdated: -20 points
          elif [ "$OUTDATED_COUNT" -gt 10 ]; then
            SCORE=$((SCORE - 10))  # Some outdated: -10 points
          fi
          
          # Ensure score doesn't go below 0
          SCORE=$([ $SCORE -lt 0 ] && echo 0 || echo $SCORE)
          
          echo "Dependency security score: $SCORE/100"
          echo "score=$SCORE" >> $GITHUB_OUTPUT

      - name: Upload dependency analysis results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-results
          path: |
            npm-audit-*.json
            npm-audit-*.txt
            npm-outdated.json
            npm-outdated-report.txt
            license-report.json
            license-summary.txt
          retention-days: 30

  # Stage 2: Advanced Security Scanning
  advanced-dependency-scan:
    name: 🛡️ Advanced Dependency Scanning
    runs-on: ubuntu-latest
    needs: dependency-analysis
    
    strategy:
      matrix:
        scanner: [snyk, semgrep, osv]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      # Snyk Security Scanning
      - name: Run Snyk security scan
        if: matrix.scanner == 'snyk'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --json > snyk-results.json
        continue-on-error: true

      - name: Process Snyk results
        if: matrix.scanner == 'snyk'
        run: |
          if [ -f "snyk-results.json" ]; then
            echo "Processing Snyk scan results..."
            
            # Generate SARIF format for GitHub Security
            npx snyk-to-html -i snyk-results.json -o snyk-report.html || true
            
            # Count vulnerabilities
            SNYK_VULNS=$(cat snyk-results.json | jq '.vulnerabilities | length' 2>/dev/null || echo "0")
            echo "Snyk found $SNYK_VULNS vulnerabilities"
            
            # Extract high-priority issues
            cat snyk-results.json | jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical")' > snyk-critical.json || true
          fi

      # Semgrep Security Scanning
      - name: Run Semgrep security scan
        if: matrix.scanner == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/react
            p/typescript
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      # OSV (Open Source Vulnerabilities) Scanning
      - name: Run OSV security scan
        if: matrix.scanner == 'osv'
        run: |
          echo "Running OSV vulnerability scan..."
          
          # Install OSV scanner
          curl -L https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          
          # Run OSV scan
          ./osv-scanner --format json --output osv-results.json . || true
          
          if [ -f "osv-results.json" ]; then
            # Count vulnerabilities
            OSV_VULNS=$(cat osv-results.json | jq '.results[].packages[].vulnerabilities | length' 2>/dev/null || echo "0")
            echo "OSV found $OSV_VULNS vulnerabilities"
            
            # Generate human-readable report
            ./osv-scanner --output osv-report.txt . || true
          fi

      - name: Upload scanner results
        uses: actions/upload-artifact@v4
        with:
          name: advanced-scan-${{ matrix.scanner }}
          path: |
            snyk-*.json
            snyk-*.html
            semgrep.sarif
            osv-*.json
            osv-*.txt
          retention-days: 30

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ matrix.scanner == 'semgrep' && 'semgrep.sarif' || '' }}
        continue-on-error: true

  # Stage 3: Automated Security Patching
  auto-security-patching:
    name: 🔧 Automated Security Patching
    runs-on: ubuntu-latest
    needs: [dependency-analysis, advanced-dependency-scan]
    if: ${{ inputs.auto-fix == true || (github.event_name == 'schedule' && needs.dependency-analysis.outputs.critical-count > 0) }}
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "Security Auto-Patcher"

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Download audit results
        uses: actions/download-artifact@v4
        with:
          name: dependency-analysis-results

      - name: Apply automatic security fixes
        id: auto-fix
        run: |
          echo "Applying automatic security fixes..."
          
          # Run npm audit fix for automatic fixes
          AUDIT_FIX_OUTPUT=$(npm audit fix --json || true)
          echo "$AUDIT_FIX_OUTPUT" > npm-audit-fix-results.json
          
          # Check if any fixes were applied
          FIXES_APPLIED=$(echo "$AUDIT_FIX_OUTPUT" | jq -r '.metadata.totalDependencies // 0')
          
          if [ "$FIXES_APPLIED" -gt 0 ]; then
            echo "Applied $FIXES_APPLIED automatic security fixes"
            echo "fixes-applied=true" >> $GITHUB_OUTPUT
            echo "fixes-count=$FIXES_APPLIED" >> $GITHUB_OUTPUT
            
            # Generate summary of changes
            npm audit --json > npm-audit-post-fix.json || true
            
            # Create summary
            echo "## Security Patch Summary" > patch-summary.md
            echo "" >> patch-summary.md
            echo "Automatic security fixes applied: $FIXES_APPLIED" >> patch-summary.md
            echo "" >> patch-summary.md
            echo "### Changes:" >> patch-summary.md
            git diff --name-only >> patch-summary.md
            
          else
            echo "No automatic fixes available"
            echo "fixes-applied=false" >> $GITHUB_OUTPUT
            echo "fixes-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Create security patch PR
        if: steps.auto-fix.outputs.fixes-applied == 'true'
        run: |
          # Create a new branch for security patches
          BRANCH_NAME="security/auto-patch-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          # Stage changes
          git add package.json package-lock.json
          
          # Commit changes
          git commit -m "🔒 Automated security patches

Applied ${{ steps.auto-fix.outputs.fixes-count }} automatic security fixes.

- Addressed critical and high-severity vulnerabilities
- Updated vulnerable dependencies to secure versions
- Maintained compatibility with existing functionality

Auto-generated by Security Automation
Security score improvement expected.

Co-authored-by: Security Bot <security@readzone.app>"
          
          # Push branch
          git push origin "$BRANCH_NAME"
          
          # Create PR using GitHub CLI
          gh pr create \
            --title "🔒 Automated Security Patches - $(date +%Y-%m-%d)" \
            --body-file patch-summary.md \
            --label "security,dependencies,automated" \
            --assignee "$GITHUB_ACTOR"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Stage 4: Security Reporting
  dependency-security-report:
    name: 📊 Dependency Security Report
    runs-on: ubuntu-latest
    needs: [dependency-analysis, advanced-dependency-scan, auto-security-patching]
    if: always()
    
    steps:
      - name: Download all analysis results
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate comprehensive security report
        run: |
          echo "📊 Generating comprehensive dependency security report..."
          
          # Collect all results
          VULNERABILITIES="${{ needs.dependency-analysis.outputs.vulnerabilities-found || 0 }}"
          CRITICAL="${{ needs.dependency-analysis.outputs.critical-count || 0 }}"
          HIGH="${{ needs.dependency-analysis.outputs.high-count || 0 }}"
          MODERATE="${{ needs.dependency-analysis.outputs.moderate-count || 0 }}"
          OUTDATED="${{ needs.dependency-analysis.outputs.outdated-count || 0 }}"
          SECURITY_SCORE="${{ needs.dependency-analysis.outputs.security-score || 0 }}"
          
          # Create comprehensive report
          cat > dependency-security-report.md << EOF
          # 🛡️ ReadZone Dependency Security Report
          
          **Report Date:** $(date -u +"%Y-%m-%d %H:%M UTC")
          **Scan Type:** ${{ inputs.scan-type || 'scheduled' }}
          **Commit:** \`${{ github.sha }}\`
          
          ## Security Score: ${SECURITY_SCORE}/100
          
          ### Vulnerability Summary
          | Severity | Count | Status |
          |----------|-------|--------|
          | Critical | $CRITICAL | ${{ needs.dependency-analysis.outputs.critical-count == '0' && '✅' || '🚨' }} |
          | High | $HIGH | ${{ needs.dependency-analysis.outputs.high-count == '0' && '✅' || '⚠️' }} |
          | Moderate | $MODERATE | ${{ needs.dependency-analysis.outputs.moderate-count == '0' && '✅' || 'ℹ️' }} |
          | **Total** | **$VULNERABILITIES** | ${{ needs.dependency-analysis.outputs.vulnerabilities-found == '0' && '✅' || '❌' }} |
          
          ### Maintenance Status
          - **Outdated Dependencies:** $OUTDATED packages
          - **Auto-Patches Applied:** ${{ needs.auto-security-patching.outputs.fixes-count || 'N/A' }}
          
          ### Security Analysis Coverage
          - ✅ **NPM Audit**: Comprehensive vulnerability database
          - ✅ **Snyk Security**: Commercial vulnerability intelligence
          - ✅ **Semgrep**: Static analysis security patterns
          - ✅ **OSV Scanner**: Open source vulnerability database
          - ✅ **License Compliance**: License compatibility analysis
          
          ### Recommendations
          ${{ needs.dependency-analysis.outputs.critical-count > 0 && '- 🚨 **CRITICAL**: Immediate patching required for critical vulnerabilities' || '' }}
          ${{ needs.dependency-analysis.outputs.high-count > 0 && '- ⚠️ **HIGH**: Review and patch high-severity vulnerabilities within 7 days' || '' }}
          ${{ needs.dependency-analysis.outputs.outdated-count > 20 && '- 📦 **MAINTENANCE**: Consider updating outdated dependencies' || '' }}
          ${{ needs.dependency-analysis.outputs.security-score < 80 && '- 📈 **IMPROVEMENT**: Security score below target - prioritize vulnerability resolution' || '' }}
          ${{ needs.dependency-analysis.outputs.vulnerabilities-found == '0' && '- ✅ **EXCELLENT**: No vulnerabilities detected - maintain current practices' || '' }}
          
          ### Phase 4.2 Security Automation
          - ✅ **Multi-Scanner Integration**: NPM Audit + Snyk + Semgrep + OSV
          - ✅ **Automated Patching**: Critical vulnerabilities auto-fixed
          - ✅ **License Compliance**: Automated license compatibility checks
          - ✅ **Daily Monitoring**: Scheduled security scans
          - ✅ **GitHub Integration**: SARIF uploads to Security tab
          
          ---
          *This report was automatically generated by ReadZone Security Automation*
          EOF
          
          echo "Security report generated"

      - name: Create GitHub summary
        run: |
          # Copy report to GitHub step summary
          if [ -f "dependency-security-report.md" ]; then
            cat dependency-security-report.md >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-report
          path: dependency-security-report.md
          retention-days: 30

      - name: Set workflow status
        run: |
          CRITICAL="${{ needs.dependency-analysis.outputs.critical-count || 0 }}"
          SECURITY_SCORE="${{ needs.dependency-analysis.outputs.security-score || 0 }}"
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "🚨 CRITICAL dependency vulnerabilities detected!"
            echo "Immediate security patching required."
            exit 1
          elif [ "$SECURITY_SCORE" -lt 70 ]; then
            echo "⚠️  Dependency security score below acceptable threshold ($SECURITY_SCORE/100)"
            echo "Consider reviewing and updating vulnerable dependencies."
            exit 1
          else
            echo "✅ Dependency security analysis completed successfully."
            echo "Security score: $SECURITY_SCORE/100"
            exit 0
          fi
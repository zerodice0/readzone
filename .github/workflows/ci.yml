name: ReadZone CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Code Quality and Type Checking
  quality-check:
    name: Code Quality & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run type-check

      - name: ESLint check
        run: npm run lint

      - name: Prettier format check
        run: npm run format -- --check

      - name: Generate Prisma client
        run: npm run db:generate

  # Unit Tests with Jest
  unit-tests:
    name: Unit Tests (Jest)
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-test-coverage
          fail_ci_if_error: false

  # Security Tests Integration
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Setup test database
        run: |
          npm run db:push
        env:
          DATABASE_URL: file:./test-security.db

      - name: Run encryption tests
        run: npm run test:encryption
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test-security.db

      - name: Run security tests (development)
        run: npm run test:security
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test-security.db
          REDIS_URL: redis://localhost:6379

      - name: Run RBAC security tests
        run: npm run test:rbac-security
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test-security.db

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            manual-security-test-report.json
            rbac-penetration-test-report.json
            comprehensive-security-test-report.json
          retention-days: 7

  # E2E Tests with Playwright
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        project: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Setup test database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: file:./test-e2e.db

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.project }}

      - name: Build Next.js application
        run: npm run build
        env:
          DATABASE_URL: file:./test-e2e.db

      - name: Run Playwright E2E tests
        run: npx playwright test --project=${{ matrix.project }}
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test-e2e.db
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000
          REDIS_URL: redis://localhost:6379

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}
          path: test-results/
          retention-days: 7

  # Specialized Security E2E Tests
  security-e2e-tests:
    name: Security E2E Tests
    runs-on: ubuntu-latest
    needs: [quality-check, security-tests]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Setup test database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: file:./test-security-e2e.db

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build Next.js application
        run: npm run build
        env:
          DATABASE_URL: file:./test-security-e2e.db

      - name: Run compliance validation tests
        run: npm run test:compliance
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test-security-e2e.db
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000

      - name: Run penetration tests
        run: npm run test:penetration
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test-security-e2e.db
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000

      - name: Run performance security tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test-security-e2e.db
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000

      - name: Upload security E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-e2e-results
          path: |
            penetration-test-report.json
            security-load-test-report.json
          retention-days: 7

  # Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build Next.js application
        run: npm run build
        env:
          DATABASE_URL: file:./build-validation.db

      - name: Analyze bundle size
        run: |
          npm install -g @next/bundle-analyzer
          ANALYZE=true npm run build
        env:
          DATABASE_URL: file:./build-validation.db

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: .next/
          retention-days: 1

  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Budget Check
  performance-budget:
    name: Performance Budget Check
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: .next/

      - name: Check bundle size limits
        run: |
          echo "Checking Next.js bundle sizes..."
          
          # Check if main bundle is under 500KB
          MAIN_SIZE=$(find .next/static/chunks -name "*.js" -type f -exec du -b {} + | sort -n | tail -1 | cut -f1)
          MAX_SIZE=512000 # 500KB in bytes
          
          if [ "$MAIN_SIZE" -gt "$MAX_SIZE" ]; then
            echo "❌ Main bundle size ($MAIN_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
            exit 1
          else
            echo "✅ Main bundle size ($MAIN_SIZE bytes) is within limit ($MAX_SIZE bytes)"
          fi

  # Final Status Check
  ci-status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests, security-tests, e2e-tests, security-e2e-tests, build-validation, dependency-scan, performance-budget]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "CI Pipeline Results:"
          echo "===================="
          echo "Quality Check: ${{ needs.quality-check.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Security Tests: ${{ needs.security-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security E2E Tests: ${{ needs.security-e2e-tests.result }}"
          echo "Build Validation: ${{ needs.build-validation.result }}"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Performance Budget: ${{ needs.performance-budget.result }}"
          
          # Check if any critical jobs failed
          if [[ "${{ needs.quality-check.result }}" == "failure" ]] || \
             [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.build-validation.result }}" == "failure" ]]; then
            echo "❌ Critical CI jobs failed!"
            exit 1
          fi
          
          # Check if security jobs failed
          if [[ "${{ needs.security-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.security-e2e-tests.result }}" == "failure" ]]; then
            echo "⚠️  Security tests failed - requires immediate attention!"
            exit 1
          fi
          
          echo "✅ All critical CI jobs passed successfully!"

      - name: Create CI summary
        run: |
          echo "## 🚀 ReadZone CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security E2E | ${{ needs.security-e2e-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Budget | ${{ needs.performance-budget.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: readzone_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'readzone-backend/package-lock.json'

      - name: Install backend dependencies
        working-directory: ./readzone-backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./readzone-backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./readzone-backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/readzone_test?schema=public

      - name: Run backend tests
        working-directory: ./readzone-backend
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/readzone_test?schema=public
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret

      - name: Run backend linting
        working-directory: ./readzone-backend
        run: npm run lint

      - name: Generate test coverage
        working-directory: ./readzone-backend
        run: npm run test:coverage

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./readzone-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'readzone-frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./readzone-frontend
        run: npm ci

      - name: Run frontend unit tests
        working-directory: ./readzone-frontend
        run: npm test

      - name: Run frontend linting
        working-directory: ./readzone-frontend
        run: npm run lint

      - name: Generate test coverage
        working-directory: ./readzone-frontend
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./readzone-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build frontend
        working-directory: ./readzone-frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./readzone-frontend/dist
          retention-days: 7

  # E2E Tests
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: readzone_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        working-directory: ./readzone-backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./readzone-frontend
        run: npm ci

      - name: Setup database for E2E tests
        working-directory: ./readzone-backend
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/readzone_e2e?schema=public

      - name: Start backend server
        working-directory: ./readzone-backend
        run: npm start &
        env:
          NODE_ENV: test
          PORT: 3001
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/readzone_e2e?schema=public
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret

      - name: Start frontend server
        working-directory: ./readzone-frontend
        run: npm run preview &
        env:
          VITE_API_BASE_URL: http://localhost:3001/api

      - name: Wait for servers to start
        run: |
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3001/api/health
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:4173/

      - name: Install Playwright browsers
        working-directory: ./readzone-frontend
        run: npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: ./readzone-frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ./readzone-frontend/playwright-report/
          retention-days: 7

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit for backend
        working-directory: ./readzone-backend
        run: npm audit --audit-level moderate

      - name: Run npm audit for frontend
        working-directory: ./readzone-frontend
        run: npm audit --audit-level moderate

  # Code Quality
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Build and Test Docker Images
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./readzone-backend
          file: ./readzone-backend/Dockerfile
          push: false
          tags: readzone-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./readzone-frontend
          file: ./readzone-frontend/Dockerfile
          push: false
          tags: readzone-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.yml config
          echo "Docker Compose configuration is valid"

  # Notifications
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-scan, docker-build]
    if: always()

    steps:
      - name: Notify on success
        if: needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' && needs.e2e-test.result == 'success'
        run: echo "✅ All tests passed successfully!"

      - name: Notify on failure
        if: needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' || needs.e2e-test.result == 'failure'
        run: |
          echo "❌ Some tests failed:"
          echo "Backend: ${{ needs.backend-test.result }}"
          echo "Frontend: ${{ needs.frontend-test.result }}"
          echo "E2E: ${{ needs.e2e-test.result }}"
name: 🤖 Automated Monitoring & Intelligence

on:
  schedule:
    # 매시간 자동 모니터링 실행
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: '모니터링 유형'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - performance
          - security
          - quality
      alert_threshold:
        description: '알림 임계값 (0.0-1.0)'
        required: false
        default: '0.7'
        type: string

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  # 실시간 성능 모니터링
  real-time-performance:
    name: 📊 Real-time Performance Monitoring
    runs-on: ubuntu-latest
    outputs:
      performance-score: ${{ steps.performance-check.outputs.score }}
      performance-grade: ${{ steps.performance-check.outputs.grade }}
      needs-attention: ${{ steps.performance-check.outputs.needs-attention }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run performance monitoring
        id: performance-check
        run: npx tsx scripts/automated-performance-monitor.ts
        env:
          MONITORING_TYPE: ${{ github.event.inputs.monitoring_type || 'comprehensive' }}
          ALERT_THRESHOLD: ${{ github.event.inputs.alert_threshold || '0.7' }}

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: automated-performance-report
          path: .performance-reports/
          retention-days: 30

  # 지능형 품질 분석
  intelligent-quality-analysis:
    name: 🧠 Intelligent Quality Analysis
    runs-on: ubuntu-latest
    needs: real-time-performance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run intelligent analysis
        run: npx tsx scripts/intelligent-quality-analyzer.ts
        env:
          PERFORMANCE_SCORE: ${{ needs.real-time-performance.outputs.performance-score }}

      - name: Generate quality insights
        run: npx tsx scripts/generate-quality-insights.ts

  # 자동화된 보안 스캔
  automated-security-scan:
    name: 🛡️ Automated Security Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run automated security scan
        run: npx tsx scripts/automated-security-monitor.ts

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: automated-security-report
          path: security-reports/
          retention-days: 90

  # 실시간 알림 시스템
  real-time-alerting:
    name: 🚨 Real-time Alert System
    runs-on: ubuntu-latest
    needs: [real-time-performance, intelligent-quality-analysis, automated-security-scan]
    if: ${{ needs.real-time-performance.outputs.needs-attention == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup notification system
        run: npx tsx scripts/setup-alert-system.ts

      - name: Send performance alerts
        if: ${{ needs.real-time-performance.outputs.performance-score < 0.7 }}
        run: |
          echo "🚨 Performance Alert: Score below threshold"
          echo "Current Score: ${{ needs.real-time-performance.outputs.performance-score }}"
          echo "Grade: ${{ needs.real-time-performance.outputs.performance-grade }}"

      - name: Create monitoring issue
        uses: actions/github-script@v7
        if: ${{ needs.real-time-performance.outputs.performance-score < 0.6 }}
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Automated Performance Alert - Critical',
              body: `
              ## 자동 성능 모니터링 알림
              
              **성능 점수**: ${{ needs.real-time-performance.outputs.performance-score }}
              **등급**: ${{ needs.real-time-performance.outputs.performance-grade }}
              **생성 시간**: ${new Date().toISOString()}
              
              ### 권장 조치사항
              - [ ] 성능 병목 지점 분석
              - [ ] 코드 최적화 검토
              - [ ] 인프라 스케일링 고려
              
              ### 자동 모니터링 데이터
              - 워크플로 실행: ${{ github.run_id }}
              - 커밋: ${{ github.sha }}
              - 브랜치: ${{ github.ref_name }}
              
              _이 이슈는 자동화된 모니터링 시스템에 의해 생성되었습니다._
              `,
              labels: ['automated', 'performance', 'critical']
            });
            console.log('Created issue:', issue.data.number);

  # 모니터링 대시보드 업데이트
  update-monitoring-dashboard:
    name: 📈 Update Monitoring Dashboard
    runs-on: ubuntu-latest
    needs: [real-time-performance, intelligent-quality-analysis, automated-security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Update dashboard data
        run: npx tsx scripts/update-monitoring-dashboard.ts
        env:
          PERFORMANCE_SCORE: ${{ needs.real-time-performance.outputs.performance-score }}
          PERFORMANCE_GRADE: ${{ needs.real-time-performance.outputs.performance-grade }}

      - name: Generate monitoring report
        run: npx tsx scripts/generate-monitoring-report.ts

      - name: Commit dashboard updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: '🤖 Automated monitoring dashboard update'
          file_pattern: 'monitoring-dashboard/ .performance-reports/'
          commit_author: 'Automated Monitoring <monitoring@readzone.dev>'

  # 지능형 자동화 추천
  intelligent-automation:
    name: 🤖 Intelligent Automation Recommendations
    runs-on: ubuntu-latest
    needs: [real-time-performance, intelligent-quality-analysis]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Generate automation recommendations
        run: npx tsx scripts/intelligent-automation-advisor.ts
        env:
          PERFORMANCE_SCORE: ${{ needs.real-time-performance.outputs.performance-score }}

      - name: Create automation PR
        if: hashFiles('automation-recommendations.json') != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('automation-recommendations.json')) {
              const recommendations = JSON.parse(fs.readFileSync('automation-recommendations.json', 'utf8'));
              
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🤖 Automated Optimization Recommendations',
                head: 'automation/recommendations-' + Date.now(),
                base: 'main',
                body: `
                ## 자동화된 최적화 권장사항
                
                이 PR은 지능형 모니터링 시스템이 생성한 최적화 권장사항을 포함합니다.
                
                ### 권장사항 요약
                ${recommendations.map(r => `- ${r.type}: ${r.description}`).join('\n')}
                
                ### 예상 개선 효과
                - 성능 향상: ${recommendations.reduce((acc, r) => acc + (r.expectedImprovement || 0), 0)}%
                - 자동화 수준: ${recommendations.filter(r => r.automatable).length}/${recommendations.length} 항목
                
                _이 PR은 자동화된 시스템에 의해 생성되었습니다. 리뷰 후 적용해주세요._
                `
              });
            }

  # 모니터링 요약 보고서
  monitoring-summary:
    name: 📋 Monitoring Summary Report
    runs-on: ubuntu-latest
    needs: [real-time-performance, intelligent-quality-analysis, automated-security-scan, real-time-alerting, update-monitoring-dashboard, intelligent-automation]
    if: always()
    
    steps:
      - name: Generate summary report
        run: |
          echo "## 🤖 자동화된 모니터링 실행 완료" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 성능 지표" >> $GITHUB_STEP_SUMMARY
          echo "- **성능 점수**: ${{ needs.real-time-performance.outputs.performance-score || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **등급**: ${{ needs.real-time-performance.outputs.performance-grade || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **주의 필요**: ${{ needs.real-time-performance.outputs.needs-attention || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 실행된 작업" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 실시간 성능 모니터링" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 지능형 품질 분석" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 자동화된 보안 스캔" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 모니터링 대시보드 업데이트" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 지능형 자동화 추천" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 다음 실행" >> $GITHUB_STEP_SUMMARY
          echo "다음 자동 모니터링은 1시간 후에 실행됩니다." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Phase 4.4: 자동화 개선 및 실시간 모니터링 시스템 작동 중_" >> $GITHUB_STEP_SUMMARY
name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1' # Run every Monday at 2 AM
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: ['readzone-backend', 'readzone-frontend']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.directory }}/package-lock.json'

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci

      - name: Run npm audit
        working-directory: ./${{ matrix.directory }}
        run: |
          npm audit --audit-level moderate
          npm audit --json > audit-results.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: audit-results-${{ matrix.directory }}
          path: ./${{ matrix.directory }}/audit-results.json

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/express
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        context: ['readzone-backend', 'readzone-frontend']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.context }}:latest ./${{ matrix.context }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.context }}:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.context }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.context }}.sarif'

      - name: Run Snyk Container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: '${{ matrix.context }}:latest'
          args: --severity-threshold=high

  # Infrastructure Security Scan
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov (IaC Security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: readzone-backend/Dockerfile
          format: sarif
          output-file: hadolint-backend.sarif

      - name: Run Hadolint for frontend
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: readzone-frontend/Dockerfile
          format: sarif
          output-file: hadolint-frontend.sarif

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'hadolint-*.sarif'

  # License Compliance Check
  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check backend licenses
        working-directory: ./readzone-backend
        run: |
          npm ci
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages

      - name: Check frontend licenses
        working-directory: ./readzone-frontend
        run: |
          npm ci
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, infrastructure-scan, license-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          cat > security-report.md << 'EOF'
          # Security Scan Report
          
          Generated on: $(date)
          
          ## Summary
          
          | Scan Type | Status |
          |-----------|--------|
          | Dependency Scan | ${{ needs.dependency-scan.result }} |
          | SAST Scan | ${{ needs.sast-scan.result }} |
          | Secret Scan | ${{ needs.secret-scan.result }} |
          | Container Scan | ${{ needs.container-scan.result }} |
          | Infrastructure Scan | ${{ needs.infrastructure-scan.result }} |
          | License Scan | ${{ needs.license-scan.result }} |
          
          ## Recommendations
          
          1. Review all HIGH and CRITICAL vulnerabilities
          2. Update dependencies with known security issues
          3. Fix any detected secrets or hardcoded credentials
          4. Review container security best practices
          5. Ensure all licenses are compliant with project requirements
          
          ## Next Steps
          
          - [ ] Address critical vulnerabilities
          - [ ] Update security policies
          - [ ] Schedule regular security reviews
          - [ ] Train team on secure coding practices
          
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Create security issue (if failures)
        if: needs.dependency-scan.result == 'failure' || needs.sast-scan.result == 'failure' || needs.secret-scan.result == 'failure' || needs.container-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'ðŸ”’ Security Scan Failures Detected';
            const body = `
            ## Security Scan Results
            
            One or more security scans have failed. Please review the following:
            
            - **Dependency Scan**: ${{ needs.dependency-scan.result }}
            - **SAST Scan**: ${{ needs.sast-scan.result }}
            - **Secret Scan**: ${{ needs.secret-scan.result }}
            - **Container Scan**: ${{ needs.container-scan.result }}
            - **Infrastructure Scan**: ${{ needs.infrastructure-scan.result }}
            - **License Scan**: ${{ needs.license-scan.result }}
            
            Please check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed results.
            
            ## Action Required
            
            1. Review the security scan results
            2. Address any critical or high-severity issues
            3. Update dependencies if necessary
            4. Close this issue once all issues are resolved
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'bug', 'priority-high']
            });

  # Notify security team
  notify-security:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: security-report
    if: always() && (needs.dependency-scan.result == 'failure' || needs.sast-scan.result == 'failure' || needs.secret-scan.result == 'failure')

    steps:
      - name: Send security alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: 'ðŸš¨ Security vulnerabilities detected in ReadZone repository!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
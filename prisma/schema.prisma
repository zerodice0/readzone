generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  nickname      String    @unique
  bio           String?
  image         String?
  password      String
  // 비밀번호 재설정 관련 필드
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  reviews  BookReview[]
  opinions BookOpinion[]
  likes    ReviewLike[]
  comments Comment[]
  drafts   ReviewDraft[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id            String   @id @default(cuid())
  isbn          String?  @unique
  isbn13        String?  // ISBN-13 추가 저장
  title         String
  authors       String   // JSON 문자열로 저장 (String[])
  publisher     String?
  translators   String?  // JSON 문자열로 저장 (String[])
  genre         String?
  pageCount     Int?
  thumbnail     String?
  description   String?  // 책 소개
  contents      String?  // 카카오 API contents
  url           String?  // 카카오 API 상세 URL
  datetime      String?  // 출간일
  price         Int?     // 정가
  salePrice     Int?     // 판매가
  status        String?  // 판매 상태
  isManualEntry Boolean  @default(false)
  
  // 카카오 API 관련 필드
  kakaoId       String?  @unique // 카카오 API 고유 ID
  lastSyncedAt  DateTime? // 마지막 API 동기화 시간
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reviews  BookReview[]
  opinions BookOpinion[]
  apiCache BookApiCache[]
  manualEntries ManualBookEntry[]
  drafts   ReviewDraft[]

  @@index([title])
  @@index([isbn])
  @@index([isbn13])
}

model BookReview {
  id            String   @id @default(cuid())
  title         String?
  content       String
  isRecommended Boolean
  tags          String
  purchaseLink  String?
  linkClicks    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  likes    ReviewLike[]
  comments Comment[]
}

model BookOpinion {
  id            String   @id @default(cuid())
  content       String
  isRecommended Boolean
  createdAt     DateTime @default(now())

  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model ReviewLike {
  id       String @id @default(cuid())
  userId   String
  reviewId String

  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  review BookReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  reviewId String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  review   BookReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

// API 캐싱 테이블
model BookApiCache {
  id           String   @id @default(cuid())
  query        String   @unique
  response     String   // JSON 응답 저장
  searchCount  Int      @default(1)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 관련 도서들과의 연결 (캐시된 검색 결과)
  books Book[]

  @@index([query])
  @@index([expiresAt])
}

// API 사용량 추적
model ApiUsageLog {
  id          String   @id @default(cuid())
  date        String   // YYYY-MM-DD 형식
  endpoint    String   // API 엔드포인트
  method      String   // HTTP 메서드
  searchCount Int      @default(0)
  errorCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, endpoint])
  @@index([date])
}

// 수동 입력 도서 검증 로그
model ManualBookEntry {
  id            String   @id @default(cuid())
  bookId        String
  submittedBy   String   // User ID
  verifiedAt    DateTime?
  verifiedBy    String?  // Admin User ID
  status        String   @default("pending") // pending, approved, rejected
  rejectReason  String?
  originalData  String   // JSON 원본 데이터
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([submittedBy])
}

// 독후감 임시저장
model ReviewDraft {
  id        String   @id @default(cuid())
  userId    String
  bookId    String?
  title     String?
  content   String
  metadata  String   @default("{}") // JSON 메타데이터 (태그, 설정 등)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book? @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookId])
  @@index([updatedAt])
}
# ReadZone Docker Compose - Production Environment
version: '3.8'

services:
  # Next.js Application - Production
  readzone-app:
    image: readzone:latest
    container_name: readzone-app-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - KAKAO_BOOK_API_KEY=${KAKAO_BOOK_API_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - REDIS_URL=redis://redis:6379
    volumes:
      - readzone-prod-data:/app/data
      - readzone-prod-logs:/app/logs
    networks:
      - readzone-prod-network
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Redis for caching and sessions - Production
  redis:
    image: redis:7-alpine
    container_name: readzone-redis-prod
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1 
      --save 300 10 
      --save 60 10000
    volumes:
      - readzone-prod-redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - readzone-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: readzone-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - readzone-prod-logs:/var/log/nginx
    networks:
      - readzone-prod-network
    restart: unless-stopped
    depends_on:
      - readzone-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Database Backup Service
  db-backup:
    image: alpine:latest
    container_name: readzone-backup-prod
    volumes:
      - readzone-prod-data:/data:ro
      - readzone-prod-backups:/backups
    networks:
      - readzone-prod-network
    restart: unless-stopped
    command: >
      sh -c "
      apk add --no-cache sqlite &&
      while true; do
        timestamp=$$(date +%Y%m%d_%H%M%S) &&
        sqlite3 /data/production.db '.backup /backups/readzone_backup_$$timestamp.db' &&
        find /backups -name '*.db' -mtime +7 -delete &&
        echo 'Backup completed at $$timestamp' &&
        sleep 86400
      done"
    profiles:
      - backup

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: readzone-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - readzone-prometheus-data:/prometheus
    networks:
      - readzone-prod-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: readzone-grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - readzone-grafana-data:/var/lib/grafana
    networks:
      - readzone-prod-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: readzone-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - readzone-loki-data:/loki
    networks:
      - readzone-prod-network
    restart: unless-stopped
    profiles:
      - monitoring

# Volumes for data persistence
volumes:
  readzone-prod-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/readzone/data
  readzone-prod-logs:
    driver: local
  readzone-prod-redis-data:
    driver: local
  readzone-prod-backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/readzone/backups
  readzone-prometheus-data:
    driver: local
  readzone-grafana-data:
    driver: local
  readzone-loki-data:
    driver: local

# Networks
networks:
  readzone-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16